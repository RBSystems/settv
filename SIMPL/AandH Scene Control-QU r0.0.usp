// SIMPL+ Module Information
/*
Dealer Name:	Front Side Solutions, Inc.
Programmer:		cdr
Comments:			A&H QU Series Scene Control
*/

// Compiler Directives
#ENABLE_DYNAMIC
#SYMBOL_NAME ""
#CATEGORY "34" // Mixer
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#HELP_BEGIN
AandH Scene Control-QU r0.0

Triggers scene recalls on QU series Mixers.
  **This is a 1-way module. All feedback provided is generated
  logically inside the module.
  
  This module uses a TCP/IP client symbol on port 51325.
  See demo program for example setup.

Inputs:
 Analog-
 Scene: The scene you want to recall in Decimal format.
 MidiChnl: The MidiChnl to control in decimal format.
 
 Digital-
  Take: Sets the scene selected on the Midi Channel selected.
  
Outputs:
 Serial-
  ToMixer: Connect to the TCP/IP symbol Transmit line.

Reference the QU Mixer MIDI protocol for more details and valid Control
Channels for the selected control type.

Note 1: Not all comninations of scenes and MidiChannels module are valid for
 all QU series mixers. Please refer to the protocol documentation for more information.

Note 2: The QU series mixers return a near constant \xFF on the receiver line of the TCP/IP
 connection, as well as a VERY large data dump when a scene is recalled.  This can easily
 overwhelm the the receive buffers on the Crestron processor if care is not taken.
 Because of this, this module suite was built to be 1-way. It is recomended to comment out
 the receive line from the TCP/IP symbol so that your buffers do not generate continuous
 errors in the control system log.

For more information Reference: Qu_MIDI_Protocol_V1.9.pdf

Tested with QU firmware V1.95

Release: 2018-12-01 Release r0.0

#HELP_END

// DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
DIGITAL_INPUT Take;
ANALOG_INPUT 	Scene, MidiChnl;
STRING_OUTPUT ToMixer;

// Functions
Function BuildScene(INTEGER nScene)
{
	Integer nBMidi, nCMidi;
	
  nBMidi = 0xB0 + MidiChnl - 1;
  nCMidi = 0xC0 + MidiChnl - 1;
  
  If (nScene > 0 && nScene < 101)
	  Makestring(ToMixer, "%s\x00\x00%s\x20\x00%s%s", CHR(nBMidi), CHR(nBMidi), CHR(nCMidi), CHR(nScene - 1));
}


// Global Variables
//INTEGER	nScene;

// Event Handlers
CHANGE Scene
{
	If(Take)
		BuildScene(Scene);	
}

PUSH Take
{
	BuildScene(Scene);	
}


/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
/*
Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}
*/

